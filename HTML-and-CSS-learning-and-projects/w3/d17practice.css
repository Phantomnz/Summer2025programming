/* CSS scroll snap - scroll snapping aligns scrollable content precisely precisely. Use scroll-snap-type: x mandatory; on the container and scroll-snap-align: start; on the items */
.carousel {
    display: flex; /* Use flexbox to arrange items in a row */
    overflow-x: auto; /* Enable horizontal scrolling */
    scroll-snap-type: x mandatory; /* Enable scroll snapping in the x direction */
}

.carousel > div {
    flex: none; /* Prevents flex items from shrinking */
    width: 300px; /* Set a fixed width for each item */
    height: 200px; /* Set a fixed height for each item */
    scroll-snap-align: start; /* Aligns the start of the item with the snap point */
    margin-right: 10px; /* Optional spacing between items */
    background-color: lightblue; /* Just for visibility */
    display: flex;
}

/* container queries - CSS now supports @container rules to apply styles based on the size of a parent container, not just the viewport, needs container-type: inline-size; on the parent */
@container (min-width: 300px) {
    .card{
        display: grid;
        grid-template-columns: 1fr 1fr; /* Two equal columns */
        gap: 1rem; /* Space between items */
    }
}

.card-container {
    container-type: inline-size; /* Enable container queries */
    display: grid;
    grid-template-columns: 1fr; /* Default to one column */
    gap: 1rem; /* Space between items */
}

/* Custom media queries with @custom-media - Define reusable breakpoints */
@custom-media --small-viewport (max-width: 600px);

@media (--small-viewport) {
    body {
        background: blue; /* Change background color for small viewports */
    }
}

/* rem and em units - rem is relative to the root font size, em is relative to the font size of the element */

/* Min/max width recap: min-width ensures a component doesn't shrink below a certain size, max-width ensures it doesn't grow beyond a certain size.*/